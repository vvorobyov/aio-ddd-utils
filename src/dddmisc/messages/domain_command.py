import typing as t
from datetime import datetime, timezone
from uuid import UUID, uuid4


class DomainCommand:
    reference: UUID  # Autogenerated command reference, can be restored
    timestamp: int   # Autogenerated command created time, can be restored
    ...              # Other data fields

    def __init__(self, *, __reference: UUID = None, __timestamp: int = None, **kwargs):
        self.__object_data__ = {'reference': __reference or uuid4(),
                                'timestamp': __timestamp or datetime.now(tz=timezone.utc).timestamp(),
                                'data': kwargs}

    class Meta:
        is_baseclass: bool  # Base class can't used as command only for make inheritance classes. Isn't inheritable property. By default is False
        domain: str         # Domain name for command. Is inheritable property, and can't be change for inherited classes

    @classmethod
    def load(cls, data: dict):
        """
        Method restore command instance from data dict

        :param data:
        :return:
        """

    @classmethod
    def loads(cls, data: t.Union[bytes, str]):
        """
        Method restore command instance from json string

        :param bytes data: json data string
        :return: instance of domain command
        """

    def dump(self) -> dict:
        """
        Method for dump command to json serialise dict

        :return:
        """

    def dumps(self) -> bytes:
        """
        Method for dump command to json string

        :return:
        """

